#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>

#define SERVER_PORT 12345 /* arbitrario, pero el cliente y el servidor deben coincidir */
#define BUF_SIZE 4096 /* tamaño de bloque para transferencia */

void fatal(char *string);

int main(int argc, char **argv) {
    int s;
    char buf[BUF_SIZE]; /* búfer para el archivo entrante */
    struct hostent *h; /* información sobre el servidor */
    struct sockaddr_in server;

    if (argc != 3)
        fatal("Usar: cliente nombre-servidor nombre-archivo");

    h = gethostbyname(argv[1]); /* busca la dirección IP del host */
    if (!h)
        fatal("falla en gethostbyname");

    s = socket(AF_INET, SOCK_STREAM, 0);
    if (s < 0)
        fatal("socket");

    memset(&server, 0, sizeof(server));
    server.sin_family = AF_INET;
    memcpy(&server.sin_addr.s_addr, h->h_addr, h->h_length);
    server.sin_port = htons(SERVER_PORT);

    if (connect(s, (struct sockaddr *)&server, sizeof(server)) < 0)
        fatal("falla en conexion");

    /* Se ha establecido la conexión. Se envía el nombre del archivo incluyendo el byte 0 al final. */
    send(s, argv[2], strlen(argv[2]) + 1, 0);

    /* Obtiene el archivo y lo escribe en la salida estándar. */
    while (1) {
        int bytes = recv(s, buf, BUF_SIZE, 0); /* lee del socket */
        if (bytes <= 0)
            exit(0); /* verifica el final del archivo */
        write(1, buf, bytes); /* escribe en la salida estándar */
    }

    close(s);

    return 0;
}

void fatal(char *string) {
    printf("%s\n", string);
    exit(1);
}
